/*
 * Generated by Robotoworks Mechanoid
 */
package eu.masconsult.template.recipes.ops;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.ops.Operation;
import com.robotoworks.mechanoid.ops.OperationContext;
import com.robotoworks.mechanoid.ops.OperationResult;
import com.robotoworks.mechanoid.ops.OperationServiceBridge;
import com.robotoworks.mechanoid.ops.OperationConfiguration;
import android.content.Intent;
import android.os.Bundle;

public abstract class AbstractImportRecipesOperation extends Operation {
	public static final String ACTION_IMPORT_RECIPES = "eu.masconsult.template.recipes.ops.RecipesService.actions.IMPORT_RECIPES";

	public static final String EXTRA_FILE = "eu.masconsult.template.recipes.ops.RecipesService.extras.FILE";
	public static final String EXTRA_LOCAL = "eu.masconsult.template.recipes.ops.RecipesService.extras.LOCAL";

	static class Args {
		public String file;
		public boolean local;
	}
	
	static class Configuration extends OperationConfiguration {
		@Override 
		public Operation createOperation() {
			return new ImportRecipesOperation();
		}
		
		@Override
		public Intent findMatchOnConstraint(OperationServiceBridge bridge, Intent intent) {
			Intent existingRequest = bridge.findPendingRequestByActionWithExtras(AbstractImportRecipesOperation.ACTION_IMPORT_RECIPES, intent.getExtras());
			
			return existingRequest;
			
		}
	}
	
	public static final Intent newIntent(String file, boolean local) {
		Intent intent = new Intent(ACTION_IMPORT_RECIPES);
		intent.setClass(Mechanoid.getApplicationContext(), RecipesService.class);
		
		Bundle extras = new Bundle();
		extras.putString(EXTRA_FILE, file);
		extras.putBoolean(EXTRA_LOCAL, local);
		
		intent.putExtras(extras);
		
		return intent;
		
	}

	@Override
	public OperationResult execute(OperationContext context) {
		Args args = new Args();
		
		Bundle extras = context.getIntent().getExtras();
		args.file = extras.getString(EXTRA_FILE);
		args.local = extras.getBoolean(EXTRA_LOCAL);
		
		return onExecute(context, args);
	}
			
	protected abstract OperationResult onExecute(OperationContext context, Args args);
}
